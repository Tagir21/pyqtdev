# -*- coding: utf-8 -*-
import os

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QVBoxLayout
from random import randint

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(789, 503)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 791, 571))
        self.tabWidget.setObjectName("tabWidget")
        self.scanner = QtWidgets.QWidget()
        self.scanner.setObjectName("scanner")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.scanner)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(-11, -1, 811, 281))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.fndbtn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.fndbtn.setObjectName("fndbtn")
        self.verticalLayout.addWidget(self.fndbtn)
        self.tabWidget.addTab(self.scanner, "")
        self.Editor = QtWidgets.QWidget()
        self.Editor.setObjectName("Editor")
        self.tabWidget.addTab(self.Editor, "")
        self.text_edit = QtWidgets.QTextEdit(self.Editor)
        self.text_edit.setGeometry(QtCore.QRect(0, 0, 785, 400))
        self.fndbtn_2 = QtWidgets.QPushButton("Open", self.Editor)
        self.savebtn = QtWidgets.QPushButton("Save", self.Editor)
        self.fndbtn_2.move(40, 410)
        self.savebtn.move(150, 410)
        self.Form = QtWidgets.QWidget()
        self.Form.setObjectName("Form")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.Form)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(-1, -1, 791, 261))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.checkBox = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.checkBox.setObjectName("checkBox")
        self.verticalLayout_2.addWidget(self.checkBox)
        self.radioButton = QtWidgets.QRadioButton(self.verticalLayoutWidget_2)
        self.radioButton.setObjectName("radioButton")
        self.verticalLayout_2.addWidget(self.radioButton)
        self.horizontalSlider = QtWidgets.QSlider(self.verticalLayoutWidget_2)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.verticalLayout_2.addWidget(self.horizontalSlider)
        self.spinBox = QtWidgets.QSpinBox(self.verticalLayoutWidget_2)
        self.spinBox.setObjectName("spinBox")
        self.verticalLayout_2.addWidget(self.spinBox)
        self.comboBox = QtWidgets.QComboBox(self.verticalLayoutWidget_2)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.verticalLayout_2.addWidget(self.comboBox)
        self.tabWidget.addTab(self.Form, "")
        self.savebtn_2 = QtWidgets.QPushButton('Сохранить', self.verticalLayoutWidget_2)
        self.verticalLayout_2.addWidget(self.savebtn_2)
        self.Random = QtWidgets.QWidget()
        self.Random.setObjectName("Random")
        self.verticalLayoutWidget_5 = QtWidgets.QWidget(self.Random)
        self.verticalLayoutWidget_5.setGeometry(QtCore.QRect(0, -10, 811, 281))
        self.verticalLayoutWidget_5.setObjectName("verticalLayoutWidget_5")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_5)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.fndbtn_4 = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.fndbtn_4.setObjectName("fndbtn_4")
        self.verticalLayout_6.addWidget(self.fndbtn_4)
        self.tabWidget.addTab(self.Random, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 789, 21))
        self.menuBar.setObjectName("menuBar")
        MainWindow.setMenuBar(self.menuBar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(4)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_functions()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.fndbtn.setText(_translate("MainWindow", "Find directory"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.scanner), _translate("MainWindow", "Scaner"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Editor), _translate("MainWindow", "Text edit"))
        self.checkBox.setText(_translate("MainWindow", "Are you from MAI?"))
        self.radioButton.setText(_translate("MainWindow", "Push me if yes"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Дубосековская 13"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Дубосековская 9"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Вилиса Лациса 14"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Form), _translate("MainWindow", "Form"))
        self.fndbtn_4.setText(_translate("MainWindow", "Find directory"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Random), _translate("MainWindow", "Random value"))

    def add_functions(self):
        self.fndbtn.clicked.connect(lambda: self.open_directory())
        self.fndbtn_2.clicked.connect(lambda: self.open_file())
        self.savebtn.clicked.connect(lambda: self.save_file(self.text_edit.toPlainText()))
        self.savebtn_2.clicked.connect(lambda: self.check_all())
        self.fndbtn_4.clicked.connect(lambda: self.random())


    def open_directory(self):
        fname = QFileDialog.getExistingDirectory(self.scanner)
        files = os.listdir(fname)
        self.print_files(files)

    def print_files(self, files_arr):
        files = QMessageBox()
        files.setWindowTitle("Files")
        files.setText("".join([f'{x}\n' for x in files_arr]))
        files.setStandardButtons(QMessageBox.Ok)

        files.exec_()

    def open_file(self):
        fname = QFileDialog.getOpenFileName(self.Editor)[0]
        try:
            with open(fname, 'r') as f:
                data = f.read()
                self.text_edit.setText(data)
        except FileNotFoundError:
            print('No file((')

        f.close()

    def save_file(self, text):
        fname = QFileDialog.getSaveFileName(self.Editor)[0]
        try:
            with open(fname, 'w') as f:
                f.write(text)
                f.close()
        except FileNotFoundError:
            print('No file((')

    def check_all(self):
        result = []
        result += ['Учащийся МАИ? ' + str(self.checkBox.isChecked())]
        result += ['Yes? ' + str(self.radioButton.isChecked())]
        result += ['Slider value - ' + str(self.horizontalSlider.value())]
        result += ['Spin box value is ' + self.spinBox.text()]
        result += ['Общежитие - ' + self.comboBox.currentText()]
        result_str = '\n'.join(result)
        self.save_file(result_str)

    def random(self):
        fname = QFileDialog.getOpenFileName(self.Random)[0]
        try:
            with open(fname, 'r') as f:
                s = f.readlines()
                self.print_files([s[randint(0, len(s) - 1)]])
        except FileNotFoundError:
            print('No file((')


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
